apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: {{ index .Values "prometheus-operator" "grafana" "fullnameOverride" }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  name: {{ index .Values "prometheus-operator" "grafana" "fullnameOverride" }}-set-home
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app: "{{ index .Values "prometheus-operator" "grafana" "fullnameOverride" }}"
    spec:
      containers:
      - name: grafana-setup
        image: {{ index .Values "prometheus-operator" "grafana" "setup" "image" "repository" }}:{{ index .Values "prometheus-operator" "grafana" "setup" "image" "tag" }}
        env:
          - name: GRAFANA_USER
            valueFrom:
              secretKeyRef:
                name: grafana
                key: admin-user
          - name: GRAFANA_PASSWORD
            valueFrom:
              secretKeyRef:
                name: grafana
                key: admin-password
          - name: GRAFANA_URL
            value: "http://{{  index .Values "prometheus-operator" "grafana" "fullnameOverride" }}.{{ .Values.namespace }}.svc.cluster.local:80"
          - name: MAIN_DASHBOARD_UID
            value: "f000cf13-581b-459c-b35e-f5d89fded48f"
        command: ["/bin/sh"]
        args:
          - "-c"
          - |
            set -e

            python -c "
            from requests import request

            def http_query(url, method='POST', json=None, check_status_code=True):
                resp = request(method, '${GRAFANA_URL}/api/{}'.format(url), auth=('${GRAFANA_USER}', '${GRAFANA_PASSWORD}'), json=json)
                print('Response: [status code={}, json={}]', resp.status_code, resp.json())
                if check_status_code:
                    resp.raise_for_status()

                return resp.json()

            dashboard_id = http_query('dashboards/uid/${MAIN_DASHBOARD_UID}', method='GET')['dashboard']['id']
            http_query('user/stars/dashboard/{}'.format(dashboard_id), check_status_code=False)
            http_query('preferences/set-home-dash', json=dict(theme='', homeDashboardId=dashboard_id, timezone=''))
            "
      restartPolicy: OnFailure