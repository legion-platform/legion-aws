#!/usr/bin/env python3
#
#    Copyright 2019 EPAM Systems
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

import argparse
import ast
import json
import logging
import subprocess
import sys

import yaml

EXPORT_FORMATS = ['yaml', 'json']
HIERA_BINARY = "/usr/local/bin/hiera"


def get_variables_list(file):
    """
    Get all variables from template file
    """

    stream = open(file, 'r')
    data = yaml.load(stream, Loader=yaml.FullLoader)
    log.debug(data)

    return data


def read_hiera_data(hiera_config, hiera_environment, hiera_cloud, all_vars):
    """
    Read data from Hiera

    :param hiera_config: Hiera config location
    :type hiera_config: str
    :param hiera_environment: Hiera environment name to get data for
    :type hiera_environment: string
    :param hiera_cloud: Hiera cloud name to get data for
    :type hiera_cloud: string
    :param all_vars: list of variables to get from hiera
    :type all_vars: :dict
    :return: list[dict] List of Nexus components
    """

    filtered_vars = {}

    for key_name in all_vars:
        variable = hiera_get(hiera_config, key_name, hiera_environment, hiera_cloud)
        if variable is not None:
            filtered_vars.update({key_name: variable})
    log.debug('Exported Hiera data: {}'.format(filtered_vars))
    return filtered_vars


def hiera_get(config, key_name, env, cloud):
    """
    Read hiera data
    """

    hiera_command = [HIERA_BINARY, '-a', '--config', config, key_name, "environment={}".format(env),
                     "cloud={}".format(cloud)]
    log.debug(hiera_command)

    try:
        output = ast.literal_eval(subprocess.check_output(hiera_command, encoding="utf-8"))
        log.debug(output)
        result = output[0].strip('[]') if len(output) < 2 else output
        return result
    except Exception:
        log.warning('Key {} is missing in hieradata'.format(key_name))
        return None


def work(args):
    """"
    Export Legion variables

    :param args: configuration parameters
    :return: None
    """

    # Get vars list
    try:
        log.debug('Reading variables list from template file {}'.format(args.vars_template))
        all_vars = get_variables_list(args.vars_template)
    except Exception as e:
        raise ValueError('Error reading variables from template: {}'.format(e))

    # Read data from Hiera
    try:
        log.debug('Reading hiera data for environment={}, cloud={}'.format(args.hiera_environment, args.hiera_cloud))
        filtered_vars = read_hiera_data(args.hiera_config, args.hiera_environment, args.hiera_cloud, all_vars)
    except Exception as e:
        raise ValueError('Error reading variables from hiera: {}'.format(e))

    # Generate target vars file
    try:
        log.debug('Export data to {} variables file {}'.format(args.output_format, args.output_file))

        if args.output_format == 'yaml':
            with open(args.output_file, 'w') as output_file:
                yaml.dump(filtered_vars, output_file, default_flow_style=False)
        elif args.output_format == 'json':
            with open(args.output_file, 'w') as output_file:
                json.dump(filtered_vars, output_file, indent=4, sort_keys=True)
        else:
            raise ValueError('Unknown output format. Must be one of {}'.format(EXPORT_FORMATS))

    except Exception as e:
        log.error('Error creating target var file: {}'.format(e))
        sys.exit(1)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Hiera variables exporter for Legion automation scripts')
    parser.add_argument('--vars-template', '-t', type=str, help='Path to hiera variables template file')
    parser.add_argument('--hiera-config', '-c', type=str, default='hiera.yaml', help='Path to hiera.yaml config')
    parser.add_argument('--hiera-environment', '-e', type=str, help='Hiera environment name to get data for')
    parser.add_argument('--hiera-cloud', type=str, help='Hiera cloud name to get data for')
    parser.add_argument('--output-format', '-f', type=str, help='json or yaml output variables file')
    parser.add_argument('--output-file', '-o', type=str, help='File with exported variables')
    parser.add_argument('--verbose', '-v', action='store_true', help='verbose log output')

    args = parser.parse_args()

    log = logging.getLogger(__name__)
    if args.verbose:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO
    logging.basicConfig(level=log_level, format='%(asctime)s - %(levelname)s - %(message)s')

    try:
        work(args)
    except KeyboardInterrupt:
        print('Interrupt')
        sys.exit(2)
    except Exception as e:
        log.error('Error exporting variables. {}'.format(e))
        sys.exit(1)
