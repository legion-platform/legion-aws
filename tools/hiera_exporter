#!/usr/bin/env python2.7
#
#    Copyright 2019 EPAM Systems
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

import datetime
import argparse
import re
import logging
import sys
import hiera
import yaml
import json


EXPORT_FORMATS = ['yaml', 'json']

def get_variables_list(file):
    """
    Get all variables from template file
    """

    stream = open(file, 'r')
    data = yaml.load(stream, Loader=yaml.FullLoader)
    log.debug(data)

    return data


def read_hiera_data(hiera_config, hiera_filters, all_vars):
    """
    Read data from Hiera

    :param hiera_config: Hiera config location
    :type hiera_config: str
    :param hiera_filters: list of filters to get data from hiera
    :type hiera_filters: dict
    :param all_vars: list of variables to get from hiera
    :type all_vars: :dict
    :return: list[dict] List of Nexus components
    """

    kwargs = dict(item.split('=', 1) for item in hiera_filters)
    hiera_client = hiera.HieraClient(hiera_config, 'hiera', **kwargs)

    filtered_vars = {}

    for k in all_vars:
        variable = hiera_client.get(k)
        if variable != 'nil':
            filtered_vars.update({k: variable})
        else:
            log.warning('Key {} is missing in hieradata'.format(k))

    log.debug('Exported Hiera data: {}'.format(filtered_vars))

    return filtered_vars


def work(args):
    """"
    Export Legion variables

    :param args: configuration parameters
    :return: None
    """

    # Get vars list
    try:
        log.debug('Reading variables list from template file {}'.format(args.vars_template))
        all_vars = get_variables_list(args.vars_template)
    except Exception as e:
                raise ValueError('Error reading variables from template: {}'.format(e))
 
    # Read data from Hiera
    try:
        log.debug('Reading variables from hiera with next filters: {}'.format(args.hiera_filters))
        filtered_vars = read_hiera_data(args.hiera_config, args.hiera_filters, all_vars)
    except Exception as e:
                raise ValueError('Error reading variables from hiera: {}'.format(e))

    # Generate target vars file
    try:
        log.debug('Export data to {} variables file {}'.format(args.output_format, args.output_path))
        
        if args.output_format == 'yaml':
            with open(args.output_path, 'w') as output_file:
                yaml.dump(filtered_vars, output_file)
        elif args.output_format == 'json':
            with open(args.output_path, 'w') as output_file:
                json.dump(filtered_vars, output_file, indent=4, sort_keys=True)
        else:
            # log.error('Unknown output format. Must be one of {!r}'.format(EXPORT_FORMATS))
            raise ValueError('Unknown output format. Must be one of {}'.format(EXPORT_FORMATS))
            
    except Exception as e:
                log.error('Error creating target var file: {}'.format(e))
                sys.exit(1)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Hiera variables exporter for Legion automation scripts')
    parser.add_argument('--vars-template', '-t', type=str, help='Path to hiera variables template file')
    parser.add_argument('--hiera-config', '-c', type=str, default='hiera.yaml', help='Path to hiera.yaml config')
    parser.add_argument('--hiera-filters', '-f', nargs='*', help='Hiera filters to apply, e.g "environment=dev, cloud=gcp"' )
    parser.add_argument('--output-format', '-o', type=str, help='json or yaml output variables file')
    parser.add_argument('--output-path', '-p', type=str, help='Path to export variables file')
    parser.add_argument('--verbose', '-v', action='store_true', help='verbose log output')

    args = parser.parse_args()

    log = logging.getLogger(__name__)
    if args.verbose:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO
    logging.basicConfig(level=log_level, format='%(asctime)s - %(levelname)s - %(message)s')

    try:
        work(args)
    except KeyboardInterrupt:
        print('Interrupt')
        sys.exit(2)
    except Exception as e:
        log.error('Error exporting variables. {}'.format(e))
        sys.exit(1)